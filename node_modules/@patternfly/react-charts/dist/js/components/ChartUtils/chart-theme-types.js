"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getThresholdTheme = exports.getDonutUtilizationTheme = exports.getDonutThresholdStaticTheme = exports.getDonutThresholdDynamicTheme = exports.getDonutTheme = exports.getChartTheme = exports.getBulletQualitativeRangeTheme = exports.getBulletPrimarySegmentedMeasureTheme = exports.getBulletPrimaryNegativeMeasureTheme = exports.getBulletPrimaryDotMeasureTheme = exports.getBulletGroupTitleTheme = exports.getBulletComparativeWarningMeasureTheme = exports.getBulletComparativeMeasureTheme = exports.getBulletComparativeErrorMeasureTheme = exports.getBulletTheme = exports.getAxisTheme = void 0;
const tslib_1 = require("tslib");
const cloneDeep_1 = tslib_1.__importDefault(require("lodash/cloneDeep"));
const ChartThemeTypes_1 = require("../ChartTheme/ChartThemeTypes");
const chart_theme_1 = require("./chart-theme");
/**
 * Returns axis theme
 * @private
 */
const getAxisTheme = (themeColor) => (0, chart_theme_1.getCustomTheme)(themeColor, ChartThemeTypes_1.ChartAxisTheme);
exports.getAxisTheme = getAxisTheme;
/**
 * Returns bullet chart theme
 * @private
 */
const getBulletTheme = (themeColor) => (0, chart_theme_1.getCustomTheme)(themeColor, ChartThemeTypes_1.ChartBulletTheme);
exports.getBulletTheme = getBulletTheme;
/**
 * Returns comparative error measure theme for bullet chart
 * @private
 */
const getBulletComparativeErrorMeasureTheme = (themeColor) => (0, chart_theme_1.getCustomTheme)(themeColor, ChartThemeTypes_1.ChartBulletComparativeErrorMeasureTheme);
exports.getBulletComparativeErrorMeasureTheme = getBulletComparativeErrorMeasureTheme;
/**
 * Returns comparative measure theme for bullet chart
 * @private
 */
const getBulletComparativeMeasureTheme = (themeColor) => (0, chart_theme_1.getCustomTheme)(themeColor, ChartThemeTypes_1.ChartBulletComparativeMeasureTheme);
exports.getBulletComparativeMeasureTheme = getBulletComparativeMeasureTheme;
/**
 * Returns comparative warning measure theme for bullet chart
 * @private
 */
const getBulletComparativeWarningMeasureTheme = (themeColor) => (0, chart_theme_1.getCustomTheme)(themeColor, ChartThemeTypes_1.ChartBulletComparativeWarningMeasureTheme);
exports.getBulletComparativeWarningMeasureTheme = getBulletComparativeWarningMeasureTheme;
/**
 * Returns group title theme for bullet chart
 * @private
 */
const getBulletGroupTitleTheme = (themeColor) => (0, chart_theme_1.getCustomTheme)(themeColor, ChartThemeTypes_1.ChartBulletGroupTitleTheme);
exports.getBulletGroupTitleTheme = getBulletGroupTitleTheme;
/**
 * Returns primary dot measure theme for bullet chart
 * @private
 */
const getBulletPrimaryDotMeasureTheme = (themeColor) => (0, chart_theme_1.getCustomTheme)(themeColor, ChartThemeTypes_1.ChartBulletPrimaryDotMeasureTheme);
exports.getBulletPrimaryDotMeasureTheme = getBulletPrimaryDotMeasureTheme;
/**
 * Returns primary negative measure theme for bullet chart
 * @private
 */
const getBulletPrimaryNegativeMeasureTheme = (themeColor) => (0, chart_theme_1.getCustomTheme)(themeColor, ChartThemeTypes_1.ChartBulletPrimaryNegativeMeasureTheme);
exports.getBulletPrimaryNegativeMeasureTheme = getBulletPrimaryNegativeMeasureTheme;
/**
 * Returns primary segmented measure theme for bullet chart
 * @private
 */
const getBulletPrimarySegmentedMeasureTheme = (themeColor) => (0, chart_theme_1.getCustomTheme)(themeColor, ChartThemeTypes_1.ChartBulletPrimarySegmentedMeasureTheme);
exports.getBulletPrimarySegmentedMeasureTheme = getBulletPrimarySegmentedMeasureTheme;
/**
 * Returns qualitative range theme for bullet chart
 * @private
 */
const getBulletQualitativeRangeTheme = (themeColor) => (0, chart_theme_1.getCustomTheme)(themeColor, ChartThemeTypes_1.ChartBulletQualitativeRangeTheme);
exports.getBulletQualitativeRangeTheme = getBulletQualitativeRangeTheme;
/**
 * Returns theme for Chart component
 * @private
 */
const getChartTheme = (themeColor, showAxis) => {
    const theme = (0, chart_theme_1.getTheme)(themeColor);
    if (!showAxis) {
        theme.axis.padding = 0;
        theme.axis.style.axis.fill = 'none';
        theme.axis.style.axis.stroke = 'none';
        theme.axis.style.grid.fill = 'none';
        theme.axis.style.grid.stroke = 'none';
        theme.axis.style.ticks.fill = 'none';
        theme.axis.style.ticks.stroke = 'none';
        theme.axis.style.tickLabels.fill = 'none';
    }
    return theme;
};
exports.getChartTheme = getChartTheme;
/**
 * Returns donut theme
 * @private
 */
const getDonutTheme = (themeColor) => (0, chart_theme_1.getCustomTheme)(themeColor, ChartThemeTypes_1.ChartDonutTheme);
exports.getDonutTheme = getDonutTheme;
/**
 * Returns dynamic donut threshold theme
 * @private
 */
const getDonutThresholdDynamicTheme = (themeColor) => {
    const theme = (0, chart_theme_1.getCustomTheme)(themeColor, ChartThemeTypes_1.ChartDonutThresholdDynamicTheme);
    // Merge just the first color of dynamic (blue, green, etc.) with static (grey) for expected colorScale
    theme.legend.colorScale = [theme.pie.colorScale[0], ...ChartThemeTypes_1.ChartDonutThresholdDynamicTheme.legend.colorScale];
    // Merge the threshold colors in case users want to show the unused data
    theme.pie.colorScale = [theme.pie.colorScale[0], ...ChartThemeTypes_1.ChartDonutThresholdStaticTheme.pie.colorScale];
    return theme;
};
exports.getDonutThresholdDynamicTheme = getDonutThresholdDynamicTheme;
/**
 * Returns static donut threshold theme
 * @private
 */
const getDonutThresholdStaticTheme = (themeColor, invert) => {
    const staticTheme = (0, cloneDeep_1.default)(ChartThemeTypes_1.ChartDonutThresholdStaticTheme);
    if (invert && staticTheme.pie.colorScale instanceof Array) {
        staticTheme.pie.colorScale = staticTheme.pie.colorScale.reverse();
    }
    return (0, chart_theme_1.getCustomTheme)(themeColor, staticTheme);
};
exports.getDonutThresholdStaticTheme = getDonutThresholdStaticTheme;
/**
 * Returns donut utilization theme
 * @private
 */
const getDonutUtilizationTheme = (themeColor) => {
    const theme = (0, chart_theme_1.getCustomTheme)(themeColor, ChartThemeTypes_1.ChartDonutUtilizationDynamicTheme);
    // Merge just the first color of dynamic (blue, green, etc.) with static (grey) for expected colorScale
    theme.pie.colorScale = [theme.pie.colorScale[0], ...ChartThemeTypes_1.ChartDonutUtilizationStaticTheme.pie.colorScale];
    theme.legend.colorScale = [theme.legend.colorScale[0], ...ChartThemeTypes_1.ChartDonutUtilizationStaticTheme.legend.colorScale];
    return theme;
};
exports.getDonutUtilizationTheme = getDonutUtilizationTheme;
/**
 * Returns threshold theme
 * @private
 */
const getThresholdTheme = (themeColor) => (0, chart_theme_1.getCustomTheme)(themeColor, ChartThemeTypes_1.ChartThresholdTheme);
exports.getThresholdTheme = getThresholdTheme;
//# sourceMappingURL=chart-theme-types.js.map