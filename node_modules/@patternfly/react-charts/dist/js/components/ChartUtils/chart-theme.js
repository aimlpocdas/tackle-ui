"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getThemeColors = exports.getTheme = exports.getCustomTheme = void 0;
const tslib_1 = require("tslib");
const merge_1 = tslib_1.__importDefault(require("lodash/merge"));
const ChartThemeColor_1 = require("../ChartTheme/ChartThemeColor");
const ChartThemeTypes_1 = require("../ChartTheme/ChartThemeTypes");
const blue_theme_1 = require("../ChartTheme/themes/colors/blue-theme");
const cyan_theme_1 = require("../ChartTheme/themes/colors/cyan-theme");
const gold_theme_1 = require("../ChartTheme/themes/colors/gold-theme");
const gray_theme_1 = require("../ChartTheme/themes/colors/gray-theme");
const green_theme_1 = require("../ChartTheme/themes/colors/green-theme");
const multi_ordered_theme_1 = require("../ChartTheme/themes/colors/multi-ordered-theme");
const multi_unordered_theme_1 = require("../ChartTheme/themes/colors/multi-unordered-theme");
const orange_theme_1 = require("../ChartTheme/themes/colors/orange-theme");
const purple_theme_1 = require("../ChartTheme/themes/colors/purple-theme");
/**
 * Apply custom properties to base and color themes
 *
 * @param themeColor The theme color to merge with custom theme
 * @param customTheme The custom theme to merge
 * @public
 */
const getCustomTheme = (themeColor, customTheme) => (0, merge_1.default)((0, exports.getTheme)(themeColor), customTheme);
exports.getCustomTheme = getCustomTheme;
/**
 * Returns base theme for given color
 * @public
 */
const getTheme = (themeColor) => {
    // Deep clone
    const baseTheme = Object.assign({}, JSON.parse(JSON.stringify(ChartThemeTypes_1.ChartBaseTheme)));
    return (0, merge_1.default)(baseTheme, (0, exports.getThemeColors)(themeColor));
};
exports.getTheme = getTheme;
/**
 * Returns theme colors
 * @public
 */
const getThemeColors = (themeColor) => {
    switch (themeColor) {
        case ChartThemeColor_1.ChartThemeColor.blue:
            return blue_theme_1.BlueColorTheme;
        case ChartThemeColor_1.ChartThemeColor.cyan:
            return cyan_theme_1.CyanColorTheme;
        case ChartThemeColor_1.ChartThemeColor.gold:
            return gold_theme_1.GoldColorTheme;
        case ChartThemeColor_1.ChartThemeColor.gray:
            return gray_theme_1.GrayColorTheme;
        case ChartThemeColor_1.ChartThemeColor.green:
            return green_theme_1.GreenColorTheme;
        case ChartThemeColor_1.ChartThemeColor.multi:
        case ChartThemeColor_1.ChartThemeColor.multiOrdered:
            return multi_ordered_theme_1.MultiColorOrderedTheme;
        case ChartThemeColor_1.ChartThemeColor.multiUnordered:
            return multi_unordered_theme_1.MultiColorUnorderedTheme;
        case ChartThemeColor_1.ChartThemeColor.orange:
            return orange_theme_1.OrangeColorTheme;
        case ChartThemeColor_1.ChartThemeColor.purple:
            return purple_theme_1.PurpleColorTheme;
        default:
            return blue_theme_1.BlueColorTheme;
    }
};
exports.getThemeColors = getThemeColors;
//# sourceMappingURL=chart-theme.js.map