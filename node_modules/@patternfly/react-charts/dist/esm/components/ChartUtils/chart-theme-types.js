import cloneDeep from 'lodash/cloneDeep';
import { ChartAxisTheme, ChartBulletComparativeErrorMeasureTheme, ChartBulletComparativeMeasureTheme, ChartBulletComparativeWarningMeasureTheme, ChartBulletGroupTitleTheme, ChartBulletPrimaryDotMeasureTheme, ChartBulletPrimaryNegativeMeasureTheme, ChartBulletPrimarySegmentedMeasureTheme, ChartBulletTheme, ChartBulletQualitativeRangeTheme, ChartDonutTheme, ChartDonutUtilizationDynamicTheme, ChartDonutUtilizationStaticTheme, ChartDonutThresholdDynamicTheme, ChartDonutThresholdStaticTheme, ChartThresholdTheme } from '../ChartTheme/ChartThemeTypes';
import { getTheme, getCustomTheme } from './chart-theme';
/**
 * Returns axis theme
 * @private
 */
export const getAxisTheme = (themeColor) => getCustomTheme(themeColor, ChartAxisTheme);
/**
 * Returns bullet chart theme
 * @private
 */
export const getBulletTheme = (themeColor) => getCustomTheme(themeColor, ChartBulletTheme);
/**
 * Returns comparative error measure theme for bullet chart
 * @private
 */
export const getBulletComparativeErrorMeasureTheme = (themeColor) => getCustomTheme(themeColor, ChartBulletComparativeErrorMeasureTheme);
/**
 * Returns comparative measure theme for bullet chart
 * @private
 */
export const getBulletComparativeMeasureTheme = (themeColor) => getCustomTheme(themeColor, ChartBulletComparativeMeasureTheme);
/**
 * Returns comparative warning measure theme for bullet chart
 * @private
 */
export const getBulletComparativeWarningMeasureTheme = (themeColor) => getCustomTheme(themeColor, ChartBulletComparativeWarningMeasureTheme);
/**
 * Returns group title theme for bullet chart
 * @private
 */
export const getBulletGroupTitleTheme = (themeColor) => getCustomTheme(themeColor, ChartBulletGroupTitleTheme);
/**
 * Returns primary dot measure theme for bullet chart
 * @private
 */
export const getBulletPrimaryDotMeasureTheme = (themeColor) => getCustomTheme(themeColor, ChartBulletPrimaryDotMeasureTheme);
/**
 * Returns primary negative measure theme for bullet chart
 * @private
 */
export const getBulletPrimaryNegativeMeasureTheme = (themeColor) => getCustomTheme(themeColor, ChartBulletPrimaryNegativeMeasureTheme);
/**
 * Returns primary segmented measure theme for bullet chart
 * @private
 */
export const getBulletPrimarySegmentedMeasureTheme = (themeColor) => getCustomTheme(themeColor, ChartBulletPrimarySegmentedMeasureTheme);
/**
 * Returns qualitative range theme for bullet chart
 * @private
 */
export const getBulletQualitativeRangeTheme = (themeColor) => getCustomTheme(themeColor, ChartBulletQualitativeRangeTheme);
/**
 * Returns theme for Chart component
 * @private
 */
export const getChartTheme = (themeColor, showAxis) => {
    const theme = getTheme(themeColor);
    if (!showAxis) {
        theme.axis.padding = 0;
        theme.axis.style.axis.fill = 'none';
        theme.axis.style.axis.stroke = 'none';
        theme.axis.style.grid.fill = 'none';
        theme.axis.style.grid.stroke = 'none';
        theme.axis.style.ticks.fill = 'none';
        theme.axis.style.ticks.stroke = 'none';
        theme.axis.style.tickLabels.fill = 'none';
    }
    return theme;
};
/**
 * Returns donut theme
 * @private
 */
export const getDonutTheme = (themeColor) => getCustomTheme(themeColor, ChartDonutTheme);
/**
 * Returns dynamic donut threshold theme
 * @private
 */
export const getDonutThresholdDynamicTheme = (themeColor) => {
    const theme = getCustomTheme(themeColor, ChartDonutThresholdDynamicTheme);
    // Merge just the first color of dynamic (blue, green, etc.) with static (grey) for expected colorScale
    theme.legend.colorScale = [theme.pie.colorScale[0], ...ChartDonutThresholdDynamicTheme.legend.colorScale];
    // Merge the threshold colors in case users want to show the unused data
    theme.pie.colorScale = [theme.pie.colorScale[0], ...ChartDonutThresholdStaticTheme.pie.colorScale];
    return theme;
};
/**
 * Returns static donut threshold theme
 * @private
 */
export const getDonutThresholdStaticTheme = (themeColor, invert) => {
    const staticTheme = cloneDeep(ChartDonutThresholdStaticTheme);
    if (invert && staticTheme.pie.colorScale instanceof Array) {
        staticTheme.pie.colorScale = staticTheme.pie.colorScale.reverse();
    }
    return getCustomTheme(themeColor, staticTheme);
};
/**
 * Returns donut utilization theme
 * @private
 */
export const getDonutUtilizationTheme = (themeColor) => {
    const theme = getCustomTheme(themeColor, ChartDonutUtilizationDynamicTheme);
    // Merge just the first color of dynamic (blue, green, etc.) with static (grey) for expected colorScale
    theme.pie.colorScale = [theme.pie.colorScale[0], ...ChartDonutUtilizationStaticTheme.pie.colorScale];
    theme.legend.colorScale = [theme.legend.colorScale[0], ...ChartDonutUtilizationStaticTheme.legend.colorScale];
    return theme;
};
/**
 * Returns threshold theme
 * @private
 */
export const getThresholdTheme = (themeColor) => getCustomTheme(themeColor, ChartThresholdTheme);
//# sourceMappingURL=chart-theme-types.js.map