import { TextAreaProps, TextInputProps } from '@patternfly/react-core';
import * as React from 'react';
import * as yup from 'yup';
import { ValidateOptions } from 'yup/lib/types';
export interface IFormField<T> {
    value: T;
    setValue: React.Dispatch<React.SetStateAction<T>>;
    defaultValue: T;
    cleanValue: T;
    reinitialize: (value: T) => void;
    prefill: (value: T) => void;
    markSaved: () => void;
    clear: () => void;
    revert: () => void;
    isDirty: boolean;
    isTouched: boolean;
    setIsTouched: (isTouched: boolean) => void;
    schema: yup.AnySchema<T>;
}
export interface IValidatedFormField<T> extends IFormField<T> {
    error: yup.ValidationError | null;
    isValid: boolean;
    shouldShowError: boolean;
}
type FormFields<TFieldValues> = {
    [key in keyof TFieldValues]: IFormField<TFieldValues[key]>;
};
type ValidatedFormFields<TFieldValues> = {
    [key in keyof TFieldValues]: IValidatedFormField<TFieldValues[key]>;
};
export interface IFormState<TFieldValues> {
    fields: ValidatedFormFields<TFieldValues>;
    values: TFieldValues;
    isDirty: boolean;
    isTouched: boolean;
    isValid: boolean;
    setValues: (newValues: Partial<TFieldValues>) => void;
    reinitialize: (newValues: Partial<TFieldValues>) => void;
    prefill: (newValues: Partial<TFieldValues>) => void;
    markSaved: () => void;
    clear: () => void;
    revert: () => void;
}
export declare const useFormField: <T>(initialValue: T, schema: yup.AnySchema<T | undefined, any, any>, options?: {
    initialTouched?: boolean | undefined;
    onChange?: ((newValue: T) => void) | undefined;
}) => IFormField<T>;
export declare const useFormState: <TFieldValues>(fields: FormFields<TFieldValues>, options?: {
    revalidateOnChange?: unknown[] | undefined;
    yupOptions?: ValidateOptions<{}> | undefined;
}) => IFormState<TFieldValues>;
export interface FormGroupOptions {
    greenWhenValid?: boolean;
}
export interface TextFieldOptions {
    greenWhenValid?: boolean;
    onBlur?: () => void;
    onChange?: (value: string) => void;
}
export declare const getTextFieldProps: (field: IValidatedFormField<string> | IValidatedFormField<string | undefined>, options?: TextFieldOptions) => Pick<TextInputProps | TextAreaProps, 'value' | 'onChange' | 'onBlur' | 'validated'>;
export declare const getTextInputProps: (field: IValidatedFormField<string> | IValidatedFormField<string | undefined>, options?: TextFieldOptions) => Partial<TextInputProps>;
export declare const getTextAreaProps: (field: IValidatedFormField<string> | IValidatedFormField<string | undefined>, options?: TextFieldOptions) => Partial<TextAreaProps>;
export {};
